generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  username          String
  email             String          @unique
  projects          Project[]       @relation("UserOwnedProjects")
  invitations       Invitation[]    @relation("UserInvitations")
  sendedInvitations Invitation[]    @relation("UserOwnInvitations")
  projectAccesses   ProjectAccess[]
  createdAt         DateTime        @default(now())
}

model Project {
  id              Int             @id @default(autoincrement())
  name            String
  ownerEmail      String
  owner           User            @relation("UserOwnedProjects", fields: [ownerEmail], references: [email], onDelete: Cascade)
  tasks           Task[]
  invitations     Invitation[]    @relation("ProjectInvitations")
  projectAccesses ProjectAccess[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      Status
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  order       Int // Field for ordering tasks
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Invitation {
  id          Int              @id @default(autoincrement())
  projectId   Int
  project     Project          @relation("ProjectInvitations", fields: [projectId], references: [id], onDelete: Cascade)
  userEmail   String
  user        User             @relation("UserInvitations", fields: [userEmail], references: [email], onDelete: Cascade)
  senderEmail String
  sender      User             @relation("UserOwnInvitations", fields: [senderEmail], references: [email], onDelete: Cascade) // renamed from 'user' to 'sender'
  permissions Permission
  status      InvitationStatus
  createdAt   DateTime         @default(now())
}

model ProjectAccess {
  id          Int        @id @default(autoincrement())
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userEmail   String
  user        User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  permissions Permission
  createdAt   DateTime   @default(now())
}

enum Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
}

enum Permission {
  READ
  READ_WRITE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
